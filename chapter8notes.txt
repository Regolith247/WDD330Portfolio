Translation functions allow you to move elements left, right, up, or down. 

When you employ a translation function, you’re moving elements without impacting the flow of the document.

Unlike position: relative , which allows you to position an element either against its current position or against a parent or other ancestor, a translated element can only be moved relative to its current position.

Transforms require vendor prefixing for IE9, Android up to 4.4.3, iOS8, and Blackberry 10.

Translates can be applied when the user hovers their mouse over an element like so:

.ad-ad2 h1 span {
    font-size: 30px;
    color: #999999;
    display: inline-block;
    …


The scale(x,y) function scales an element by the defined factors horizontally then vertically. If only one value is provided, it will be used for both the x and y values, growing or shrinking your element or pseudo-element while maintaining the original aspect ratio.

It’s also worth remembering that scaling, like translation, has no impact on the document flow.

The rotate() function rotates an element around the point of origin by a specified angle value. As with scale , by default the point of origin is the element’s center. Generally, angles are declared in degrees, with positive degrees moving clockwise and negative moving counterclockwise. In addition to degrees, values can be provided in grads, radians, or turns, but we’ll just be sticking with degrees.

As we hinted at earlier, you can control the origin from which your transforms are applied. This is done using the transform-origin property. It has the same syntax as the background-position property, and defaults to the center of the object (so that scales and rotations will be around the center of the box by default).

Browser support for the transform-origin property is the same as for transform —prefixing being required when the transform property requires it.

Note: Choose Your Ordering Carefully. The order of transform functions does matter: if you rotate before translating, your translate direction will be on the rotated axis.

Animation has certainly been possible for some time with JavaScript, but native CSS transitions generally require less client-side processing, so they’ll usually appear smoother. On mobile devices with limited computing power, this can be a lifesaver.

Transitions allow the values of CSS properties to change over time, essentially providing simple animations. For example, if a link changes color on hover, you can have it gradually fade from one color to the other instead of a sudden change. They’re both transitions, but with the CSS transition property the color transition can be gradual. If the browser lacks support for transitions, the change will be immediate instead of gradual, which is fine and accessible.

Here are the steps to create a simple transition using only CSS:

Declare the original state of the element in the default style declaration.

Declare the final state of your transitioned element; for example, a :hover state.

Include the transition functions in your default style declaration using the transition properties, including: transition-property , transition-duration , transition-timing-function , and transition-delay . 

Any property changing from one value to another for which you can find a valid midpoint can be transitioned. For example, in transitioning from a 1px red border to a 15px blue border, we transition the color and width of the border. The midpoint of 1px and 15px is obvious (8px), so we know that is a transitionable property value.

It is important to include a pre-state and a post-state. For example, to transition from rectangular corners to rounded corners, set the original state to border-radius: 0; .

The list of properties that can be animated is found athttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties.

The transition-duration property sets how long the transition will take: the duration of time it takes to go from the default state to the transitioned state.

Personal note: Man, at least the textbook lays this all out. 

200ms is generally considered the optimum time for a transition: anything slower will make the website seem slow, drawing generally unwanted attention to what was supposed to be a subtle effect. Anything faster may be too subtle.

The transition-timing-function lets you control the pace of the transition in even more granular detail. Do you want your animation to start off slow and become faster, start off fast and end slower, advance at an even keel, or some other variation?

The most common timing functions include the key terms ease , linear , ease-in , ease-out , or ease-in-out . The default ease has a slow start, then it speeds up, and ends slowly. ease-in-out is similar to ease , but accelerates more sharply at the beginning. linear creates a transition that animates at a constant speed. ease-in creates a transition that is slow to start but gains speed, then stops abruptly. The opposite, ease-out , starts at full speed, then slows progressively as it reaches the conclusion of the transition

Finally, by using the transition-delay property, it’s possible to introduce a delay before the transition begins. Normally a transition begins immediately, so the default is 0 . Include the number of milliseconds ( ms ) or seconds ( s ) to delay the transition. 

Interestingly, a negative time delay that’s less than the duration of the entire transition will cause it to start immediately, but it will start partway through the animation.

Let’s say instead of just transitioning the rotation, we transition the text’s color property as well. We’d have to first include a color property in the transitioned style declaration, and then either add the color property in the transition-property value list, or use the key term all :

transition-property: transform, color; 
transition-duration: 0.2s;  
transition-timing-function: ease-out;
transition-delay: 50ms;

If you want your properties to transition at different rates, or if you just want a select few to have a transition effect, include them as a comma-separated list containing, at minimum, the transition-property and transition-duration for each.

CSS animations, unlike transitions, allow you to control each step of an animation via keyframes.

The lack of powerful processors on many mobile devices makes CSS animations a great alternative to weighty, CPU-intensive JavaScript animation. Generally, it is best to use CSS for simple-state changes in a mobile environment. 

Fortunately, there’s a shorthand for all of these animation properties, especially since we’re still including the -webkit- prefix. The animation property takes as its value a space-separated list of values for the longhand animation-name , animation-duration , animation-timing-function , animation-delay , animation-iteration-count , animation-direction , animation-fill-mode , and animation-play-state properties

If using the shorthand property, be careful with your animation-name . You want to avoid accidentally using any animation property key term such as forwards , running , or alternate . Those three key terms in particular have caused many developers hours of debugging.

With transforms, transitions, and animations, our site is looking more dynamic. Remember the old maxim, though: just because you can, doesn’t mean you should. Animations were really cool back in the 90s. Now... things are a lot more minimalistic.





















